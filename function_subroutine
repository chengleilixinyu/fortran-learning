和子程序的明显不同在于：需要在主程序中声明之后才能使用。调用方式也有差别。另外
按照惯例用函数不去改变自变量的值。如果要改变传递参数的值，习惯上用子程序来做。
声明方式：real, external :: function_name
一般自定义函数也是放在主程序之后。
调用：function_name(parameter1,parameter2)
不需要call命令。
自定义函数可以相互调用。调用时也需要事先声明。
总之，调用自定义函数前需要做声明，调用子程序则不需要。

3、关于函数中的变量
（1）注意类型的对应。Fortran中甚至可以传递数值常量，但只有跟函数定义的参数类型
对应才会到想要的结果。如call ShowReal(1.0)就必须用1.0而不是1。
（2）传递数组参数，也跟C一样是传地址，不过不一定是数组首地址，而可以是数组某个
指定元素地址。比如有数组a(5)，调用call function(a)则传递a(1)的地址，调用call functio
n(a(3))则递a(3)的地址。
（3）多维数组作为函数参数，跟C相反的是，最后一维的大小可以不写，其他维大小必须
写。这决于Fortran中数组元素column major的存放方式。
（4）在函数中，如果数组是接收用的参数，则在声明时可以用变量赋值它的大小，甚至可
以不指定小。例如：
subroutine Array(num,size)
implicit none
integer:: size
integer num(size) !可以定义一个数组，其大小是通过传递过来的参数决定的。这很实用
……              
……
return
end
（5）save命令：将函数中的变量值在调用之后保留下来，下次调用此函数时该变量的值就
是上次保的值。只要在定义时加上save就行：
integer, save :: a=1
（6）传递函数（包括自定义函数、库函数、子程序都是可以的）。类似于C中的函数指针需要在
主程序和调用函数的函数中都声明作为参数传递的函数。如
real, external :: function  !自定义函数
real, intrinsic :: sin        !库函数
external sub                 !子程序
（7）函数使用接口（interface）：一段程序模块。以下情况必需：
a.函数返回值为数组
b.指定参数位置来传递参数时
c.所调用的函数参数个数不固定
d.输入指标参数时
e.函数返回值为指针时。
具体用法结合例子容易看懂。例子都很长。看书吧。
